/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package menuis;
import java.awt.Desktop;
import java.awt.HeadlessException;
import java.util.ArrayList;
import java.io.*;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author bachan
 */
public class MenuInfo extends javax.swing.JFrame {
   
    /**
     * Creates new form MenuInfo
     */
    
    
    //class constructor, sets a few GUI components' values
    public MenuInfo() {
        initComponents();
        lambButton.setSelected(true);
        veryHotCheck.setSelected(true);
        setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        menuDetails = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        searchTextField = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        categoryCombo = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        dishNameText = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        veryHotCheck = new javax.swing.JRadioButton();
        mediumHotCheck = new javax.swing.JRadioButton();
        mildHotCheck = new javax.swing.JRadioButton();
        priceText = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        addButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel5 = new javax.swing.JLabel();
        deleteButton = new javax.swing.JButton();
        categorySearchButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        lambButton = new javax.swing.JRadioButton();
        vegetableButton = new javax.swing.JRadioButton();
        chickenButton = new javax.swing.JRadioButton();
        porkButton = new javax.swing.JRadioButton();
        dessertButton = new javax.swing.JRadioButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        openFileMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        menuDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Dishes Number", "Category", "Dish Name", "Spiciness", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        menuDetails.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(menuDetails);

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel4.setText("Menu Details");

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Category");

        categoryCombo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        categoryCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select One", "Lamb", "Chicken", "Pork", "Vegetable", "Dessert" }));

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Dish Name");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Spiceness", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N
        jPanel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        buttonGroup1.add(veryHotCheck);
        veryHotCheck.setText("Very Hot");

        buttonGroup1.add(mediumHotCheck);
        mediumHotCheck.setText("Medium Hot");

        buttonGroup1.add(mildHotCheck);
        mildHotCheck.setText("Mild Hot");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(veryHotCheck)
                    .addComponent(mildHotCheck)
                    .addComponent(mediumHotCheck))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(veryHotCheck, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(mediumHotCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(mildHotCheck))
        );

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Price");

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        clearButton.setText("Clear");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 2, 10)); // NOI18N
        jLabel5.setText("Enter Price below");

        deleteButton.setText("Delete ");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        categorySearchButton.setText("Find Dish");
        categorySearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                categorySearchButtonActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Dishes in category: Select One"));

        buttonGroup2.add(lambButton);
        lambButton.setText("Lamb");

        buttonGroup2.add(vegetableButton);
        vegetableButton.setText("Vegetable");

        buttonGroup2.add(chickenButton);
        chickenButton.setText("Chicken");

        buttonGroup2.add(porkButton);
        porkButton.setText("Pork");

        buttonGroup2.add(dessertButton);
        dessertButton.setText("Dessert");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lambButton)
                .addGap(18, 18, 18)
                .addComponent(chickenButton)
                .addGap(18, 18, 18)
                .addComponent(porkButton)
                .addGap(18, 18, 18)
                .addComponent(vegetableButton)
                .addGap(18, 18, 18)
                .addComponent(dessertButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(vegetableButton)
                    .addComponent(porkButton)
                    .addComponent(chickenButton)
                    .addComponent(lambButton)
                    .addComponent(dessertButton))
                .addContainerGap())
        );

        jMenu1.setText("File");

        openFileMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openFileMenuItem.setText("Open File");
        openFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(openFileMenuItem);

        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(exitMenuItem);

        jMenuBar1.add(jMenu1);

        helpMenu.setText("Help");
        helpMenu.addMenuKeyListener(new javax.swing.event.MenuKeyListener() {
            public void menuKeyPressed(javax.swing.event.MenuKeyEvent evt) {
                helpMenuMenuKeyPressed(evt);
            }
            public void menuKeyReleased(javax.swing.event.MenuKeyEvent evt) {
            }
            public void menuKeyTyped(javax.swing.event.MenuKeyEvent evt) {
            }
        });
        jMenuBar1.add(helpMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jSeparator1)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(categoryCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel3)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 79, Short.MAX_VALUE)
                                                .addComponent(addButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                            .addGap(18, 18, 18)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGap(18, 18, 18)
                                                    .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addComponent(priceText))))
                                    .addComponent(dishNameText, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(209, 209, 209)))
                        .addGap(8, 8, 8))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 428, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(searchTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(searchButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(categorySearchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(dishNameText, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel1)
                                .addComponent(categoryCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel3)))
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(priceText, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(addButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(categorySearchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(1, 1, 1))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    //method called when search button is called 
    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        
        
        //When I wrote this, only God and I understood what I was doing
        
        
        try{ 
            //create array to store prices from table
            ArrayList<Integer> priceArray= new ArrayList();
            
            for(int i=0;i<menuDetails.getRowCount();i++)
            {       
                    String s=(String)menuDetails.getValueAt(i,4);
                    //if the row corresponding value of i is not null and not empty 
                    if(s!=null && s.length()!=0)
                    {
                            //add unsorted prices to the priceArray by parsing it to int
                            int value=Integer.parseInt(s);
                            priceArray.add(value);
                    }               
            } 
            /* 
               call the method that sorts the array
               pass the unsorted price array as parameter 
               calling sort method returns sorted array
               store that sorted array as sortedPriceArray
            */
            ArrayList<Integer> sortedPriceArray=this.sort(priceArray);
            /*
                call the method that does binary searching
                pass the sorted array, low and high index and inputted price as parameter
                calling search method returns a result of double type
                store that returned value as result
            */
            double result= this.search(sortedPriceArray, 0, sortedPriceArray.size()-1, Double.parseDouble(searchTextField.getText().trim()));
            //if the returned result is -1 no dishes were found
                       
            
            if(result==-1){
                JOptionPane.showMessageDialog(this, "Dish for this price not found. Try entering different price.", "Error Message", JOptionPane.ERROR_MESSAGE);
            } 
            //if dish is found for that price
            else{                
                //loop the table height(rows)
                for(int i=0; i<menuDetails.getRowCount(); i++){
                    //store prices from the table each time it loops
                    String s = (String)(menuDetails.getValueAt(i,4));
                    String dishName;
                    String dishCategory;
                    double price;
                    
                    price= Double.parseDouble(s);
                    //if returned result from search is equal to found price
                    if (price==result){
                        //get name and category of matching price and display message on found dish
                        dishName =(String)menuDetails.getValueAt(i,2);
                        dishCategory=(String)menuDetails.getValueAt(i,1);
                        String foundDish="The dish found for price "+result+" is "+dishName+" from category "+dishCategory+".";
                        JOptionPane.showMessageDialog(this,foundDish, "Information Message", JOptionPane.INFORMATION_MESSAGE);
                        
                        //TIME SPENT HERE: 6 HOURS. SLEPT: 2 TIMES. REASON FOR ERROR: UNKNOWN.  
                        
                        break;
                    }                    
                }               
             }
        }
        //if invalid price given
        catch(NumberFormatException | HeadlessException e){
            JOptionPane.showMessageDialog(this, "Please enter a valid price.", "Error Message", JOptionPane.ERROR_MESSAGE);
            //e.printStackTrace();
        }
            
        
        //Now, ONLY god knows what i am doing 
        
        
    }//GEN-LAST:event_searchButtonActionPerformed
    
    //method that clears current selection of input elements
    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        try{
            //set every input elemets to default
            categoryCombo.setSelectedIndex(0);
            dishNameText.setText("");            
            priceText.setText(""); 
            veryHotCheck.setSelected(true);            
            JOptionPane.showMessageDialog(this, "Current selection cleared.", "Success Message", JOptionPane.INFORMATION_MESSAGE);
           
        }        
        catch(Exception e){
            JOptionPane.showMessageDialog(this, "Unexpected exception thrown. Please try again.", "Error Message", JOptionPane.ERROR_MESSAGE);
        }
                
    }//GEN-LAST:event_clearButtonActionPerformed
    
    //method that does exiting of the GUI
    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed
    
    //method that opens the pointed file
    private void openFileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileMenuItemActionPerformed
        try{
            File file= new File("C:/Users/bacha/Desktop/yr2/emerging technology/INTRODUCTION.pdf");
            
            //return desktop and open file if desktop is supported
            if(Desktop.isDesktopSupported()){
                Desktop.getDesktop().open(file);                
            }
        }
        //if file not found
        catch(Exception e){
            JOptionPane.showMessageDialog(this, "File could not be found.", "Error Message", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_openFileMenuItemActionPerformed

    //method that opens help file
    private void helpMenuMenuKeyPressed(javax.swing.event.MenuKeyEvent evt) {//GEN-FIRST:event_helpMenuMenuKeyPressed
       try{
            //return desktop and open file if desktop is supported
            File helpFile= new File("C:/Users/bacha/Desktop/yr2/emerging technology/HELP.pdf");
            if(Desktop.isDesktopSupported()){
                Desktop.getDesktop().open(helpFile);                
            }
        }
       
        //if file not found
        catch(Exception e){
            JOptionPane.showMessageDialog(this, "Help File could not be found.", "Error Message", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_helpMenuMenuKeyPressed
    
    //method that adds the dish to the table
    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        try{
            //get price and dish name           
            ArrayList<String> arraylist = new ArrayList<> ();
            String dishName= dishNameText.getText().trim();
            String dishPrice= priceText.getText().trim();
            
            //assigning value of price in double to catch number format exception
            double price= Double.parseDouble(dishPrice); 
            
            //get selected category
            String boxItem = (String)categoryCombo.getSelectedItem();

            String spiceness;
            //get spiceness according to selection
            if(mediumHotCheck.isSelected()){
                spiceness="Medium Hot";
            }
            else if(mildHotCheck.isSelected()){
                spiceness= "Mild Hot";
            }
            else{
                spiceness= "Very Hot";
            }
            
            //if each input element is not empty
            if(!boxItem.equals("Select One") && !dishPrice.equals("") && !dishName.equals("")){
                //add index and dish menu elements to an arraylist
                String index= String.valueOf(tableIndexNo);
                arraylist.add(index);
                arraylist.add(boxItem);
                arraylist.add(dishName);
                arraylist.add(spiceness);
                arraylist.add(dishPrice);
                //increase table index
                tableIndexNo++;
                
                //get row and column count
                int row= menuDetails.getRowCount();
                int col= menuDetails.getColumnCount();
                int nextRow= 0;
                int nextCol=0;
                boolean flag= false;

                do{
                    String s=(String)menuDetails.getValueAt(nextRow, nextCol);
                    //if 1st element of table not empty
                    if(s!=null && s.length()!=0){
                        //go to next row
                        nextRow++;
                    }
                    else{
                        //if empty row found, point flag here
                        flag=true;
                    }
                //loop till flag is true and the next row is less than total row
                }while(!flag && nextRow<row);

                try
                {   
                    //loop for each elements in array that has input dish menu elements
                    for(int i=0;i<arraylist.size();i++){
                        //set values to row and columns from the arraylist all corresponding to the value of i
                        menuDetails.setValueAt(arraylist.get(i), nextRow, i);//(obj, row,col)
                    }
                    JOptionPane.showMessageDialog(this, "Dish added to the table.", "Success Message", JOptionPane.INFORMATION_MESSAGE);
                    
                }
                //if table is full
                catch(Exception e){
                    JOptionPane.showMessageDialog(this, "Table is full, no more rows can be added.", "Error Message", JOptionPane.ERROR_MESSAGE);
                }
                
            }
            //if any of the fields are left empty
            else{
                JOptionPane.showMessageDialog(this, "Every fields are required.", "Error Message", JOptionPane.ERROR_MESSAGE);

            }           
            
        }
        //if the entered price is lyanglyang
        catch(NumberFormatException | HeadlessException e){
            JOptionPane.showMessageDialog(this, "Please enter a valid price.", "Error Message", JOptionPane.ERROR_MESSAGE);

        }
        
    }//GEN-LAST:event_addButtonActionPerformed

    //method that performs search according to the the category selected 
    private void categorySearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_categorySearchButtonActionPerformed
        try{
            
            int count=0;
            //arraylist to store the list of dishes found in that particular category
            ArrayList<String> array= new ArrayList();
            String foundDishes;                               
            int nextRow=0;
            //if the button is selected
            if(lambButton.isSelected()){
                //loop till the total rows of table
                for(int i=0; i<menuDetails.getRowCount(); i++){
                    
                    //if next row in table is not null and not empty
                    if(menuDetails.getValueAt(nextRow,0)!= null && (!"".equals((String)menuDetails.getValueAt(nextRow,0)))){
                    
                        String category;    
                        //get category of each dish corresponding to value of i
                        category = (String)menuDetails.getValueAt(i,1);
                        
                        //if found category is equal to selected category
                        if(category.trim().equals("Lamb")){   
                            //then get the dish of matching category and store in in an array for each loop if conditions are met
                            String matchingDish= (String) menuDetails.getValueAt(i,2);
                            array.add(matchingDish);   
                            //count the number of matching dishes
                            count++;                       
                        }
                        //go to next row
                        nextRow++;
                    }
                    //if null row is returned
                    else{ 
                        //else, move on dude! 
                        break;
                    }
                }
                //store the messages in a string variable, note: the array itself is concated to the string
                foundDishes= "There are "+count+" Lamb dishes: "+array+".";
                //display found message
                JOptionPane.showMessageDialog(this, foundDishes, "Success Message", JOptionPane.INFORMATION_MESSAGE);                
            }
            
            //note: the comments above within this methods are similar for the rest of the code in this method. 
                        
            if(chickenButton.isSelected()){
                for(int i=0; i<menuDetails.getRowCount(); i++){
                    if(menuDetails.getValueAt(nextRow,0)!= null && (!"".equals((String)menuDetails.getValueAt(nextRow,0)))){
                    
                        String category;                    
                        category = (String)menuDetails.getValueAt(i,1);
                    
                        if(category.trim().equals("Chicken")){                        
                            String matchingDish= (String) menuDetails.getValueAt(i,2);
                            array.add(matchingDish);                                                 
                            count++;                       
                        }
                        nextRow++;
                    }
                    else{                        
                        break;
                    }
                }
                foundDishes= "There are "+count+" Chicken dishes: "+array+".";
                JOptionPane.showMessageDialog(this, foundDishes, "Success Message", JOptionPane.INFORMATION_MESSAGE);
            }
            
            if(porkButton.isSelected()){
                for(int i=0; i<menuDetails.getRowCount(); i++){
                    if(menuDetails.getValueAt(nextRow,0)!= null && (!"".equals((String)menuDetails.getValueAt(nextRow,0)))){
                    
                        String category;                    
                        category = (String)menuDetails.getValueAt(i,1);
                    
                        if(category.trim().equals("Pork")){                        
                            String matchingDish= (String) menuDetails.getValueAt(i,2);
                            array.add(matchingDish);                                                 
                            count++;                       
                        }
                        nextRow++;
                    }
                    else{                        
                        break;
                    }
                }
                foundDishes= "There are "+count+" Pork dishes: "+array+".";
                JOptionPane.showMessageDialog(this, foundDishes, "Success Message", JOptionPane.INFORMATION_MESSAGE);
            }
            if(vegetableButton.isSelected()){
                for(int i=0; i<menuDetails.getRowCount(); i++){
                    if(menuDetails.getValueAt(nextRow,0)!= null && (!"".equals((String)menuDetails.getValueAt(nextRow,0)))){
                    
                        String category;                    
                        category = (String)menuDetails.getValueAt(i,1);
                    
                        if(category.trim().equals("Vegetable")){                        
                            String matchingDish= (String) menuDetails.getValueAt(i,2);
                            array.add(matchingDish);                                                 
                            count++;                       
                        }
                        nextRow++;
                    }
                    else{                        
                        break;
                    }
                }
                foundDishes= "There are "+count+" Vegetable dishes: "+array+".";
                JOptionPane.showMessageDialog(this, foundDishes, "Success Message", JOptionPane.INFORMATION_MESSAGE);
            }
            if(dessertButton.isSelected()){
                for(int i=0; i<menuDetails.getRowCount(); i++){
                    if(menuDetails.getValueAt(nextRow,0)!= null && (!"".equals((String)menuDetails.getValueAt(nextRow,0)))){
                    
                        String category;                    
                        category = (String)menuDetails.getValueAt(i,1);
                    
                        if(category.trim().equals("Dessert")){                        
                            String matchingDish= (String) menuDetails.getValueAt(i,2);
                            array.add(matchingDish);                                                 
                            count++;                       
                        }
                        nextRow++;
                    }
                    else{                        
                        break;
                    }
                }
                foundDishes= "There are "+count+" Dessert dishes: "+array+".";
                JOptionPane.showMessageDialog(this, foundDishes, "Success Message", JOptionPane.INFORMATION_MESSAGE);
            } 
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(this, "Unexpected exception thrown. Please try again.", "Error Message", JOptionPane.ERROR_MESSAGE);
            //e.printStackTrace();
        }
    }//GEN-LAST:event_categorySearchButtonActionPerformed
    
    //method that deletes the selected row from table
    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
       
        try{
                       
           //check if row is selected
            if (menuDetails.getSelectedRow() != -1) {
                // remove selected row from the model
                ((DefaultTableModel)menuDetails.getModel()).removeRow(menuDetails.getSelectedRow());
                JOptionPane.showMessageDialog(this, "Selected row from table deleted.", "Warning Message", JOptionPane.WARNING_MESSAGE);
            }
            else{
                JOptionPane.showMessageDialog(this, "No rows selected/found to delete.", "Error Message", JOptionPane.ERROR_MESSAGE);
            }           
            
       }
        
       //catch any unhandled exception 
       catch(Exception e){
            JOptionPane.showMessageDialog(this, "Unhandled exception thrown.", "Error Message", JOptionPane.ERROR_MESSAGE);
       }
       
    }//GEN-LAST:event_deleteButtonActionPerformed
    
    /*
        method to sort the array
        accepts an array as parameter
        returns back the array it accepted once it is sorted 
    */
    private ArrayList<Integer> sort(ArrayList<Integer> array)
    {
                
        //here, the value of array in parameter will be the array that will be passed as argument when this method is called.   
        try{
            
            //loop till i is less than size of array
            for(int i=0;i<array.size();i++)
            {
                    //loop till j is less than array
                    for(int j=1;j<array.size();j++)
                    {
                            //if index of j is less than index of j-1
                            if(array.get(j)<array.get(j-1))
                            {
                                //store index of j-1 in temp
                                int temp = (array.get(j-1));
                                //set value of j-1 in array as value of j
                                array.set((j-1),(array.get(j)));
                                //set value of j in array as temp
                                array.set(j, temp);

                            }
                    }
            }   
            
        }
        //catch any unhandled exceptions 
        catch(Exception e){
            JOptionPane.showMessageDialog(this, "Array could not be sorted. Unexpected exception thrown.", "Error Message", JOptionPane.ERROR_MESSAGE);
        } 
        //returns the array that is sorted when this method is called
        return array;
        
        
    }
    
    /**
     *
     * @param array
     * @param low
     * @param high
     * @param key
     * @return
     * 
     * method that performs binary searching
     * accepts an array, lowest and index of that array, as key from the user input  
     * 
     */
    public double search(ArrayList<Integer> array, int low, int high, double key){        
        
        //if the lowest index is less than or equal to highest index
        if(low<=high){
            
            //defining the mid point index
            int mid= low+(high-low)/2;
            
            //key is user input price, if it is equal to mid point value, return the mid point value
            if(key== array.get(mid)){
                 return array.get(mid);
            }
            
            //if key is less than mid point value, call back the search function and send highest index and mid index
            else if(key<array.get(mid)){
                return search(array, low, mid-1, key);
            }
            
            //if key is greater than mid point value, call back the search function and send highest index and mid index
            else if(key>array.get(mid)){
                return search(array, mid+1, high, key);
            }
        }
        
        //return -1 if price(key) does not matches. 
        return -1;  
    }
    
    /**
     * @param args the command line arguments
     * main method declaration 
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MenuInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MenuInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MenuInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MenuInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MenuInfo().setVisible(true);
                
            }
        });
    }
    
    int tableIndexNo=0;   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JComboBox categoryCombo;
    private javax.swing.JButton categorySearchButton;
    private javax.swing.JRadioButton chickenButton;
    private javax.swing.JButton clearButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JRadioButton dessertButton;
    private javax.swing.JTextField dishNameText;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JRadioButton lambButton;
    private javax.swing.JRadioButton mediumHotCheck;
    private javax.swing.JTable menuDetails;
    private javax.swing.JRadioButton mildHotCheck;
    private javax.swing.JMenuItem openFileMenuItem;
    private javax.swing.JRadioButton porkButton;
    private javax.swing.JTextField priceText;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField searchTextField;
    private javax.swing.JRadioButton vegetableButton;
    private javax.swing.JRadioButton veryHotCheck;
    // End of variables declaration//GEN-END:variables
}
